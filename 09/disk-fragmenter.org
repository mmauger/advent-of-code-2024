#+TITLE: Advent of Code 2024
#+SUBTITLE: Day 9: Disk Fragmenter
#+AUTHOR: Michael R. Mauger
#+DATE: [Wed Dec 11 01:54:06 EST 2024]
#+STARTUP: showeverything inlineimages
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}
#+OPTIONS: num:nil

#+AUTO_TANGLE: t
#+PROPERTY: header-args    :tangle no
#+PROPERTY: header-args    :noweb no-export

* Day 9: Disk Fragmenter

Another push of the button leaves you in the familiar hallways of some
friendly amphipods! Good thing you each somehow got your own personal
mini submarine. The Historians jet away in search of the Chief, mostly
by driving directly into walls.

While The Historians quickly figure out how to pilot these things, you
notice an amphipod in the corner struggling with his computer. He's
trying to make more contiguous free space by compacting all of the
files, but his program isn't working; you offer to help.

He shows you the disk map (your puzzle input) he's already
generated. For example:

#+BEGIN_SRC text :tangle example.dat
2333133121414131402
#+END_SRC

The disk map uses a dense format to represent the layout of files and
free space on the disk. The digits alternate between indicating the
length of a file and the length of free space.

So, a disk map like ~12345~ would represent a one-block file, two blocks
of free space, a three-block file, four blocks of free space, and then
a five-block file. A disk map like ~90909~ would represent three
nine-block files in a row (with no free space between them).

Each file on disk also has an ID number based on the order of the
files as they appear before they are rearranged, starting with
ID 0. So, the disk map ~12345~ has three files: a one-block file with ID
0, a three-block file with ID 1, and a five-block file with
ID 2. Using one character for each block where digits are the file ID
and . is free space, the disk map ~12345~ represents these individual
blocks:

~0..111....22222~

The first example above, ~2333133121414131402~, represents these
individual blocks:

~00...111...2...333.44.5555.6666.777.888899~

The amphipod would like to move file blocks one at a time from the end
of the disk to the leftmost free space block (until there are no gaps
remaining between file blocks). For the disk map 12345, the process
looks like this:

#+begin_example
0..111....22222
02.111....2222.
022111....222..
0221112...22...
02211122..2....
022111222......
#+end_example

The first example requires a few more steps:

#+begin_example
00...111...2...333.44.5555.6666.777.888899
009..111...2...333.44.5555.6666.777.88889.
0099.111...2...333.44.5555.6666.777.8888..
00998111...2...333.44.5555.6666.777.888...
009981118..2...333.44.5555.6666.777.88....
0099811188.2...333.44.5555.6666.777.8.....
009981118882...333.44.5555.6666.777.......
0099811188827..333.44.5555.6666.77........
00998111888277.333.44.5555.6666.7.........
009981118882777333.44.5555.6666...........
009981118882777333644.5555.666............
00998111888277733364465555.66.............
0099811188827773336446555566..............
#+end_example

The final step of this file-compacting process is to update the
filesystem checksum. To calculate the checksum, add up the result of
multiplying each of these blocks' position with the file ID number it
contains. The leftmost block is in position 0. If a block contains
free space, skip it instead.

Continuing the first example, the first few blocks' position
multiplied by its file ID number are 0 * 0 = 0, 1 * 0 = 0, 2 * 9 = 18,
3 * 9 = 27, 4 * 8 = 32, and so on. In this example, the checksum is
the sum of these, 1928.

Compact the amphipod's hard drive using the process he requested. What
is the resulting filesystem checksum? (Be careful copy/pasting the
input for this puzzle; it is a single, very long line.)

** Part Two

Upon completion, two things immediately become clear. First, the disk
definitely has a lot more contiguous free space, just like the
amphipod hoped. Second, the computer is running much more slowly!
Maybe introducing all of that file system fragmentation was a bad
idea?

The eager amphipod already has a new plan: rather than move individual
blocks, he'd like to try compacting the files on his disk by moving
whole files instead.

This time, attempt to move whole files to the leftmost span of free
space blocks that could fit the file. Attempt to move each file
exactly once in order of decreasing file ID number starting with the
file with the highest file ID number. If there is no span of free
space to the left of a file that is large enough to fit the file, the
file does not move.

The first example from above now proceeds differently:

#+begin_example
00...111...2...333.44.5555.6666.777.888899
0099.111...2...333.44.5555.6666.777.8888..
0099.1117772...333.44.5555.6666.....8888..
0099.111777244.333....5555.6666.....8888..
00992111777.44.333....5555.6666.....8888..
#+end_example

The process of updating the filesystem checksum is the same; now, this
example's checksum would be 2858.

Start over, now compacting the amphipod's hard drive using this new
method instead. What is the resulting filesystem checksum?

* Solution
Try implementing in sqlite rather than guile...

** Part One
1. Read the data in ~awk~ expand to data file containing =seg-id=,
   =start-block=, =num-blocks=, and =file-id=.
2. Process the input data two characters at a time, the first will be
   assigned a sequential =file-id=, the second is free space and will
   get ~NULL~ for the =file-id=.
3. Create two views: one of free space and the other of file
   blocks. The views expand the segment rows into individual block
   rows.
4. In both views generate a sequence number. for the free space in the
   order of the segments and the inverse for file blocks.
5. By joining the two views on sequence number the new assignments are
   derived.

** Part Two
1. Read the ...


* Implementation

#+BEGIN_SRC sqlite :tangle disk-fragmenter.sql
  -- Advent of Code 2024 -- Code challenge for December 09, 2024
  -- Copyright (C) 2024  Michael R. Mauger

  -- This program is free software: you can redistribute it and/or modify
  -- it under the terms of the GNU General Public License as published by
  -- the Free Software Foundation, either version 3 of the License, or
  -- (at your option) any later version.

  -- This program is distributed in the hope that it will be useful,
  -- but WITHOUT ANY WARRANTY; without even the implied warranty of
  -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  -- GNU General Public License for more details.

  -- You should have received a copy of the GNU General Public License
  -- along with this program.  If not, see <https://www.gnu.org/licenses/>.

  .open --new :memory:

  .mode qbox
  .changes on
  .timer on
  .echo on

  CREATE TABLE segment
  (   seg_id              INT
  ,   start_block         INT
  ,   num_blocks          INT
  ,   file_id             INT
  );

  <<load-segments>>
  <<assemble-file-block>>
  <<assemble-free-block>>
  <<defragment>>
  <<part1-calculate-checksum>>

  .stats

#+END_SRC

** Part One
*** Load the segments
Transform the raw data into segment entries using a simple ~awk~
script. The script will consume two characters at a time, the first
character contains the length of the file segment. We calculate the
=seg_id= sequentially by this ~awk~ script. It will also sequentially
generate the =file_id= as well. If the length of the free segment that
follows, is greater than zero, a segment will be added with a ~NULL~
=file_id=.

#+NAME: load-segments
#+BEGIN_SRC sqlite
  .import --csv '| awk -f load-segments.awk $LOAD_FILE' segment
  UPDATE segment SET file_id = NULL WHERE file_id = -9999;
  SELECT COUNT (*) FROM segment;

#+END_SRC

#+BEGIN_SRC awk :tangle load-segments.awk
  BEGIN {
      OFS = ","
      FILE_ID = 0
      SEG_ID = 0
      BLOCK_ID = 0
  }

  # This assumes that the data lines have an even length
  {
      for (i = 1; i <= length; i += 2) {
          file_len = substr ($0, i, 1)
          free_len = substr ($0, i + 1, 1)
          if (free_len == "") { free_len = "0"; }

          # file segment
          print SEG_ID, BLOCK_ID, file_len, FILE_ID
          SEG_ID++;
          BLOCK_ID += strtonum (file_len);
          FILE_ID++;

          # free segment
          if (free_len != "0") {
              print SEG_ID, BLOCK_ID, free_len, -9999
              SEG_ID++;
              BLOCK_ID += strtonum (free_len);
          }
      }
  }

#+END_SRC

*** Expand the file view at the block level
#+NAME: assemble-file-block
#+BEGIN_SRC sqlite
  CREATE TABLE file_block
  AS
  SELECT
      ROW_NUMBER () OVER
      (   ORDER BY
              s.start_block DESC
          ,   x.VALUE ASC
      )  AS block_seq
  ,   x.VALUE  AS block_id
  ,   s.file_id
  FROM
      segment  AS s
  JOIN
      generate_series (s.start_block, s.start_block + s.num_blocks - 1, 1)  AS x
  WHERE
      s.file_id IS NOT NULL
  ;

  CREATE UNIQUE INDEX file_block_uk1 ON file_block ( block_seq )
  ;
  CREATE UNIQUE INDEX file_block_uk2 ON file_block ( block_id )
  ;

  SELECT * FROM segment WHERE file_id IS NOT NULL ORDER BY start_block LIMIT 50;
  -- SELECT * FROM file_block ORDER BY block_id LIMIT 50;

#+END_SRC

*** Expand the free view at the block level
#+NAME: assemble-free-block
#+BEGIN_SRC sqlite
  CREATE TABLE free_block
  AS
  SELECT
      ROW_NUMBER () OVER
      (   ORDER BY
              s.start_block ASC
          ,   x.VALUE ASC
      )  AS block_seq
  ,   x.VALUE  AS block_id
  FROM
      segment  AS s
  JOIN
      generate_series (s.start_block, s.start_block + s.num_blocks - 1, 1)  AS x
  WHERE
      s.file_id IS NULL
  ;

  CREATE UNIQUE INDEX free_block_uk1 ON free_block ( block_seq )
  ;
  CREATE UNIQUE INDEX free_block_uk2 ON free_block ( block_id )
  ;

  -- SELECT * FROM segment WHERE file_id IS NULL ORDER BY start_block LIMIT 50;
  -- SELECT * FROM free_block ORDER BY block_id LIMIT 50;

#+END_SRC

*** Disk Defragment
#+NAME: defragment
#+BEGIN_SRC sqlite
  CREATE VIEW defrag_block
  AS
  SELECT
      bi.block_id
  ,   CASE WHEN fr_s.block_id IS NULL
          THEN fb_i.file_id
          ELSE fb_s.file_id
      END  AS file_id
  FROM
  (   SELECT
          VALUE  AS block_id
      FROM
          generate_series
          (   0
          ,   (   SELECT
                      SUM (num_blocks) - 1
                  FROM
                      segment
                  WHERE
                      file_id IS NOT NULL
              )
          )
  ) AS bi
  LEFT JOIN
      file_block  AS fb_i
      ON
          fb_i.block_id = bi.block_id
  LEFT JOIN
      free_block  AS fr_s
      ON
          bi.block_id = fr_s.block_id
  LEFT JOIN
      file_block  AS fb_s
      ON
          fr_s.block_seq = fb_s.block_seq
  ;

#+END_SRC

*** Calculate checksum
#+NAME: part1-calculate-checksum
#+BEGIN_SRC sqlite
  SELECT
      SUBSTRING (STRING_AGG (file_id, ''), 1, 80)
  FROM
      defrag_block
  ORDER BY
      block_id
  ;

  SELECT
      SUM (block_id * file_id)  AS "Part One: Disk Defragmenter"
  FROM
      defrag_block
  ;

#+END_SRC

** Part Two

* Data
The input file has been broken into 70 character lines to make it
usable within Emacs. The reader will have to ignore newline characters
as is reads the file. The original is 20,069 characters long.

#+BEGIN_SRC text :tangle input.dat
  9636148542787989592669872448267086719787941492933393963328834092195641
  3787464979769158323343459192184689417279834575128473822293979610218796
  7684372656605065724960265371852983486392331285298258863890331935139613
  4176918173617351838837159513471274355246478438929152882310135162595552
  1797303459875686435425615191335799582973379235105289857669937283823372
  9314191675385232886121776512344648148445713942775184705875949289745483
  7743541785928865576643363420754418114643826432132754716714712063867989
  6575829110493486684341143284728732824810494160298037922229123414263025
  9840424473749738237991542834638619173112297672693367147697947439897398
  8237512684807732845125699635604378335538817868736466636847746589986725
  3280588259679653326459104515899211306180824066741236703637691424841142
  9432386885441133733648328322422178268128773244657984482327293481288360
  6740304013689047419080959679774816187142199766325733581186641183391084
  1960204139917488949958861632345481153739266860736123222594797912667214
  8929602132114190463735987815521741944999749325442779418036822351142295
  5369259311392360312431934398134289635065396683664773121457534070886211
  5673915417421816559842633365568350864415294894896032116674674333588176
  9922681843674856987121507215855362611376319241818910383426487358299786
  7475888183471789651459978979317078669714443233493625364044374576372083
  7347909140429992781370956015439116129934856063161699411085329656335548
  1675787162135993803552682063613430574558706820223146799933975049856525
  5362472030979433205950326873958778733441141073431398436097779126137014
  7475165829499674768219733218853642343245667156504963467719688872626718
  8680754095427721922233805253839652888467673284679029324447471858857381
  6887391597843574245216504250453451371133805778518146451872206492467476
  8164424659377280852315577718222246647249686179497553799252959266779265
  9063567564696148782854897959954783901933606093964257545398803882172647
  1867894533237864355787409010216331329077353334397383419755276715256929
  5626691183829884103057666292343680682419294039419440101387523330362928
  7973221914618745217484492931672925138554852620118426412080365185754026
  6540912285203364155210347035802798338073817695781934881322614922822956
  4066696846404244714996381956988293154942342931523037627879337431661962
  2361718241725349825867127736249387502712789988873692285723945856785546
  2081593653721645178513324518359067423076343313728216641929501326309430
  7455851380426539256086456818644082648173775849603994831614179461519958
  4575842867489179673958345255377927662554148777267042626675441393433979
  1320933488798713877020339557744733199976233421427581351249945685579028
  4546144514975580985888414461507151983844454382745210654760672480818253
  9698642718225795298741577650938467752722878660815241106594512273773995
  1225551479199511982515403894169370738090113655954693192826756542383511
  2964207378614240848045112422674034748986695090744672842821161233255935
  6773395344487578331897267382881755691957671123867767736747644225483893
  7957385568503176993397101150652775154553487245956814982734349885232160
  8086898086812823563975403338149250876451657773524918814296635497641615
  4269465841971147438376575199185016371499481077414853497120382225172186
  5227929961668888529859948124618497832947974433278530535726685199171865
  1469158422988550498153741090678042197314115835419318132291682370616430
  6352143348714244474754198033404283555855271065631274495832219067382170
  3265734388329642381150145076831968682825468750254579948629489956542968
  4453171536952237186379236647448983279021319170621410616221435913126250
  7896289525371997849981936918366313586345179550629824108929657736389157
  9016197390152479423383756260684972656979791953445211846350561860937863
  6146775762866922592851155359122220733362896659669455772489349490421829
  7327343278445370544622242043903035862798675439227767554713699058448076
  5155621677562851349392314771199662792086907938989892746559854970883372
  2047632937805811217690785319647269399845323544428154129798619073131160
  1488786831171531581899211680753779523589169328128368688498661125395641
  1699401638331364453057956391641951423997864196333313644080328549835823
  1371934776908969304655194240519723258386879044971643472348685238395596
  3655152532172747214541998669331732508656438291198526481241164867444260
  5933168690292457317132371015427298699327959259721596597551162025374372
  1418562663792692736523368790981919848843206938668034658776349755928359
  4718637474228771616450975370888248707967911730857744483261543842939969
  3641421710224572536255351494103120298432522639807146309241746325348721
  9981825098901353794738249998427098795725378830207313404252921146936995
  9972685031713255384546677747866544101321359263237046558241672129635944
  9230609418762448212879726331488598988374132925882428928654822981424474
  4078875860561534715061201440334432454165529629214651748641225375534227
  2217792470859059633641177534961858861452183741348583374352759022268685
  6759221023273728477380336533413585957919609322323814324324871075116496
  1048622983765473625470641241493896997738689325253069214417627446541236
  1855752237161428756697838673831722506196513750744588185581128145801561
  7053487138835579937644439791722230683147814571716996893361617140296222
  1099503183217265293487597377882353545488242522557233448967869283917427
  3428768626837079674414414099868883439635537899411711226142688435109653
  3328582517117311347975492433485663467177313056364790484337692363976698
  2245894698359419876123959810837399166066683810852733721897642336763554
  3787793135607568878243155174227762323365928344613911663612469323931428
  2296817194717522421673582165747787681083794254354833366718794266703763
  2298397182942194253155127446471919887150838761233116224834973282597929
  1036558599436839496197606639287659534448439335635857327352461463421756
  2031182337289332531475406752415624161021706226896370895812315249128118
  9513172063542729266012132892954836795981735072432266531761272767409824
  1563644440428633733492325925968768884132834673889381506760171423184878
  2748105264649175529067763753891419337897464055123218442175705122102097
  1049445036465771806460581188887529925944262735148190367942944792817697
  1833111311464886709735462098199376257327792742736644413648947675265350
  7012752172885264888215714316802948614756641972816210444587339098754075
  2762353973653240607516181980116841156913341534822366208213204764621976
  7240828023711639146166441996978346728632226760203480409034984982373360
  7626392464416054833872744089726115669833431276636525797670413026132527
  4383682426409565661217512110725698385560475111417691589479836193303629
  2576651317515462943714391565905111627726725694178865144672879920619541
  1298584924509279572233107715923224839868966837106532569386495430596436
  8133274036674584971019166822515217627759652550856197466359564927498046
  7694573867722636578444308299578077582761436951749893269025529959168780
  8868463635684147493599592658616770422139647952432793711361449097604918
  7484617853704318617388385116487821319070649681866815601396672738145353
  2822974894122768826589928753931797994295744773881692405041326838966277
  3647929260157461275152559272409423436064358122933845849537766094395818
  8464988353857247776093507986794445378830318178516211384591657032858025
  4746706766652086592730523279129985438392837548453031221856134130963316
  7320318650447912681962494081891148111530757987562564831325133930767468
  2393231548528243209123863912464379788584984148852220225314454269858028
  1012222636514149538274122814755340162149806440423494233764326255956066
  5436708143749929759853248376719830568931695790726394297882473730645961
  7120425755962179823713311084688931978050198395426634275061973750938669
  5127499771121661729679376493303070523825851827945465338673928653187770
  8059127627895681574142165273531072818832514925446638472010221736131083
  7588804339998969685253807071323555889285258675556822911229293715668942
  8138314658321150928652609038977825328634483890844883361042428710289641
  4559191932996764555522912525966723543755522183413886199560428198274484
  7184422838365321523726375068137385955934634763401342261020666883788644
  9895923276548470851054789372619847423119705488119324918277363131942579
  9052186697573828299142239574251970869858496815164465271814453147766720
  9191733597993682603285782021882113629444753832727355847066903089367949
  7557311988222514862161659012591970481819615846949347239023368447834118
  7742434016185643561075182971751145393998643597181639284354185851303494
  5970508228378592141927201849327747149425381076147567718770456398602948
  2165644536403751822271343185865137236411936114575453962760792250493612
  8949479147694158631826475921786151452047937881635217841713298643446444
  9089678610145846226269664613333632896215966439625533492687189690719565
  2729739528514999473594588348633974812273393420129823532758109315201179
  8768949471722917848055395289589240424222331037699427444041687596433967
  5131134572758423155836844827538134178060271114493761308044696969523739
  9088609362747422711870664969624255535456581323199794499411243459133467
  7252234572977231161743908933523588186976957174342624799886592880579424
  9467318246429097381274754515426459905254721223411387909831528297259317
  5755824070691521627238264241757643496780715145982864475811391894286596
  6496756523827771305861589178958052433940205644445318333313527032197987
  1047287091645912565611189551114337441354599291609358402562395922302590
  9193933844659444501447464175446767971463512040922739419266168159759010
  4931988123537593682795763276779168237247328236286538806913666882952712
  1652773439241716993742625965443029641980921762239313555627221098105595
  8667644352379420885058177091746619334196919629141034958512574735356050
  4087471729138124219831367646905066251839969965998978212682334725205023
  5527268240976677229671125323521580391734488743986530288241662427718683
  2698165246331528829440925051316277138173351742739381862846598653345071
  9144917331136327737919146950724430751910493379759928416034136538176269
  3079172751219239891556682353176313337885682820956572299244452378207992
  1844961856456623498739933897855952194141202854254642457768593754214172
  1354341759959161701320674049313698707163434335468869616623852136975820
  2548422817849891405145497079232713252837706649711673166438448910761271
  4465513691177143717453869461819310277125251720335224798790496762495050
  6193297191941170739251142520991799898117955149742247572685177953227214
  8374847799984921323420744237304145561357235557132570164070543059561565
  5562818139921843171674189121722716107295615329321717551824394013617219
  8611944464641993406330449787861758952388807255413739757633627029606588
  8594791232877841909222911638591982592949378931504066584633631637487671
  5717417189519486709333219855131440887361536158859035198920776962102917
  5776205394459774159260516674305247637418601968529744724779408993964341
  8746291825826268807496744414967942109522865647827149708644908027839832
  9444584634737252491835831897678977714082784793511629421667364520825027
  3353262740363012573999643936832117537179337846366657793339852436663885
  9813326964211142372062277046733371725639585278291964351193895272612219
  7235326913421366335468866764417120706610579950937478348465446249977346
  4594531230931449936981126844207618792296471422492298521861955374428122
  3322718592999540668251583081583484936846445450524759499743241599946887
  3574594850544092584682765383632928541034131116431729976242896964637647
  2949961398871732937586499861773445198966238998976030451420413984737727
  4455659986496740638417215445367184272490741615681993647462644259428591
  2790785152296653967684601431326522629729664534136731534924675311884394
  7681806944947028104288468646725979243162581843739268908082492168795019
  5681646159493013398268574663155146238464199063386815354354359277833827
  6717513862576933181643236897553638367886266283835436295987633536799494
  6355434745654136728828809090708779157198251621632973288430902962562039
  5141958917833729195366372792525051363274551587418996199120105586244365
  3070517210427262757885524960401767251696777764524841664195936079624065
  3323987065766569829530804520648446507981546269666915633165734932388438
  1052739275415595719951677215157698164960917951619445837430212837712786
  9424857152166556182635379598988137311560649828274259299940221625168643
  2049447962988261374339431780247151677929157725104944616810608513925417
  2429905675155218187082602246502388308371515713784351294894915560138821
  1914654938676921687399801562548644646359417572496297171757664935136688
  3874187522356896935661593012759793898053274254939864856930919217545182
  6448439160564132944992879588759745993264477913164350799173884198913213
  5074797771729154783977493684438183112585537317155692641875294477947072
  5585925970744558707517735498146132977113731020273711664229766229399735
  3294604632117099831463251697509930454274994631178851278427559042861885
  8838188837606926274697747350875373542354509885499917635399438455993772
  3155856089277329886734305350811878114451244066461481795867877967261542
  7594877311897811716980402521749441522963858442336569944130345194649626
  2939703912734381408219958148412632735766739649401499423433754979833324
  4913881462695164936452657361727686482512349839782026156460462541771259
  9210862488692289894410202628143569727281431980439382957295103079906693
  5452648814561973842013265683593522954738348168592596752417527111974843
  4685556529655676201025767977764195958260684662263930609230443428228915
  9120517459111467688688557953105888822486917830399471394923117576664510
  7347497410624626686295579574942026142176716742606229749124131931694833
  1685331928177961947597152310432586257485998548944333655593998252846258
  3144926896915038271226454476748365837544116873175119153485734021457966
  7234355456826725131937539146893339295073128730112410538159866246794070
  9482474689227689396553251977379342694710922750417791978979493733513281
  5592769110904128354023835340624411896260139381669277305811599336807592
  4939893868543523666274907017174480675934641534846221474857571069711994
  2916968152988842337094418335597787464729326492196398597894504170206856
  7594511676438873397254568437836580579960253547469274603066703933488353
  2648686763571449559257397436873070926157502921547685591533513770853317
  1542425984659661862551626255793749718787962974249435964646604673222940
  1049717416604263673370312582632182481518663183816375584185675336174537
  1852851526991763113038503538643484108782908020454370911177766987176282
  2526267418204661761919638624135871333942167242928032331288569892812575
  1110872239915790184554127930767614911154459817863917144956294417278854
  5650814458867816875449621075921164144686718854639527863281802868159791
  4975386336542369384563928227127339457438573623429126744613144962371286
  7834637348604527386645866666646973347575797466221966323284657669104136
  7567223227447236415159679170285811912559636785573463685763462757883643
  1125903323849291294760316275547886444171415190688363358620496339291720
  6563829357482687246644333296306688398984252711779370184177825055479485
  2260609447965086779291596292739272768248932770854811173576517924522724
  8218528583928575536226269035114116521374743522485422973766645844712427
  5786667792244732238439245652583087197337614063839951278233406656819536
  1313681253809861207532484879873617686984975372281531158434108031839780
  3334807479346325358275784052196327483582218582894883133310589344185084
  8920668927465365604367589135703244475389694485105775469094525548879240
  7833436272594597518533312796641534241668383512148811403211519365935757
  1662289329624235891184254510888186688846773585598915169642344773539148
  9532308196369214165522171924924299833769447543939724631716867995259095
  4815728647129199166639117554626485378535942776101516724157705955281452
  7451309869764963185052224984779743712387326416708742652857821213183628
  4642553536853654542829126617152779945181318618312696308681678028503684
  8944152191366317788193791640336947606656445381983518699999606916669334
  7765378865562818876610329456599789556870947226138665135365218295648048
  5682419090823575845336469936287575313072371154449418522139956020339988
  3567582266379394357985709156787660809515226545311343343475463214749738
  2825641760541770498142867798926746894367486143607886241311493254299153
  6712338548195372156152199157999186267390193090607265108413863630948244
  6778485191253995396454415595377437614210598597375956533070865480959519
  3115589834971560559367444769278060856661304823269848152581952269693369
  3966481521425791736789643386501482682929355479394196852542679514271282
  5127207750999419648889195969551165136174812148994396611979211383196488
  8740405410277497679062836038381961139899992872903037139294874359662774
  1963823119839326595871783332829987528839876348196063308643994013576165
  3859339110307960536486139073604411182275447979585614873238363299204365
  3228914483684088954146881856263873313554507961329756746120319252623495
  1166805724267638658475616283849076912868308261816830328139757226915388
  4139147656143072727021625324545611113087661293108728473326485481845781
  5787753856369687305036434484131230948355669628385793612582268924646072
  1742685617152122307127961812637652144460785426234216392565368335869176
  7874532380903632102783814427762648399039821239772791665027327967275341
  9450944234341852486878551897828124355147278325386651466538383439412914
  9529802595838559641778963492352469825120437617832330549485383892954638
  5848359272589992542890158977363519864499156898378853776838427439491317
  2491849530676776353630248193286147954714232796642113823536561578361739
  6091536946317078634623923743268944808511157493901081423253506997108895
  5650744436529164154365699947839815566540561975159979819299739173884133
  7158518577841867408088347957242543806585752083188439487918363336469521
  1342991973904288163286517075542760176123381123378677462161521140741573
  3077464567806970112474256759577336409765557796561553461180253277951258
  8476879630537624358121524319436181385246185554939092147458702895237454
  3569452473279828328071276864773696677691764922886070132518789657939865
  7063332948769347169072541968373442783378833749948679242726275686946442
  3126835037495684375897449762905495338640705367945590859035408886683989
  1125978337149395888829612719105734696820122791301363365865827485544014
  2317443720161576749258287272632377657565145622691385576031938644948759
  1349474526232821195716739446649638971673954027622432259358842718821136
  9917736723239456692861262618467799124435203523379028179932153571764952
  4826577853625333135480706444821455807423907978857360502688154860895692
  2323648875733778447334132370275073911652933743398130894648623576874949
  1924951119561982232455995577347471604362124095371873443335214168525533
  5930801662655273372852219577389946218414388533588292323821878822252147
  9697855421726480797182792220842442624521641934107853259047517619904443
  4129574215562478497112159148896880799486146527455877332733134295386422
  4162405288775783604560422365915450281115198917204552866059645315373875
  1516369593993419427234247865409837135525454736555114277449334493617599
  3254582084473563796624811976669810225974338229659179876396849643974388
  5856136371149040873995865449779613291697994910627750244350908727706875
  2352355839435774661895429236673869123198166173995285161466702267269418
  7978328954931226427638656817134932161137778014253970584922987971617845
  3465486555355299305316505227415547852116838673264423342169436559564854
  8412231834548884622044291932762737327648982196575698175469995329724524
  4621233238557625383015132976193086709233602468951058987587435440705826
  6225243072629811797672933720541596813325379712529467141997771134744825
  3714183184616961239431794249679549434019911811973455876170356198451191
  1793606380245054245191885890936116827188918033295630164755925761619487
  8086122082243352259615473995708853574274141330895453438814112432251150
  4456929137759391919884447470104086921377608285206361361811203972846267
  5116708314584946599354754531347767736256525240564328822290626022406633
  8686528150929590156313367389534120951793362577358488702357959471913542
  8051339010624049198927186299824382283949779551441031782061526066969454
  4717446152818819777797723057239340682343849421206566234884188785665583
  3764106945855994824615589298574184413849351599688137412329139912608375
  1472391462435155177824117852569767283275954750996960702511105677126257
  3749461387154591333422436965481110953642204680526759248826338968731642
  4173639726465697794297977219575147688913317656688832605752975586607367
  9217582452114310638915307466766482276488914953357
#+END_SRC


* Execution

#+BEGIN_SRC bash :results output
  LOAD_FILE=example.dat sqlite3 < disk-fragmenter.sql
  LOAD_FILE=input.dat   sqlite3 < disk-fragmenter.sql
#+END_SRC

#+RESULTS:
#+begin_example

CREATE TABLE segment
(   seg_id              INT
,   start_block         INT
,   num_blocks          INT
,   file_id             INT
);
Run Time: real 0.000 user 0.000125 sys 0.000124
changes: 0   total_changes: 0

.import --csv '| awk -f load-segments.awk $LOAD_FILE' segment
UPDATE segment SET file_id = NULL WHERE file_id = -9999;
Run Time: real 0.000 user 0.000000 sys 0.000037
changes: 8   total_changes: 26
SELECT COUNT (*) FROM segment;
┌───────────┐
│ COUNT (*) │
├───────────┤
│ 18        │
└───────────┘
Run Time: real 0.000 user 0.000000 sys 0.000022
changes: 8   total_changes: 26

CREATE TABLE file_block
AS
SELECT
    ROW_NUMBER () OVER
    (   ORDER BY
            s.start_block DESC
        ,   x.VALUE ASC
    )  AS block_seq
,   x.VALUE  AS block_id
,   s.file_id
FROM
    segment  AS s
JOIN
    generate_series (s.start_block, s.start_block + s.num_blocks - 1, 1)  AS x
WHERE
    s.file_id IS NOT NULL
;
Run Time: real 0.000 user 0.000000 sys 0.000281
changes: 8   total_changes: 26

CREATE UNIQUE INDEX file_block_uk1 ON file_block ( block_seq )
;
Run Time: real 0.000 user 0.000000 sys 0.000059
changes: 8   total_changes: 26
CREATE UNIQUE INDEX file_block_uk2 ON file_block ( block_id )
;
Run Time: real 0.000 user 0.000000 sys 0.000046
changes: 8   total_changes: 26

SELECT * FROM segment WHERE file_id IS NOT NULL ORDER BY start_block LIMIT 50;
┌────────┬─────────────┬────────────┬─────────┐
│ seg_id │ start_block │ num_blocks │ file_id │
├────────┼─────────────┼────────────┼─────────┤
│ 0      │ 0           │ 2          │ 0       │
│ 2      │ 5           │ 3          │ 1       │
│ 4      │ 11          │ 1          │ 2       │
│ 6      │ 15          │ 3          │ 3       │
│ 8      │ 19          │ 2          │ 4       │
│ 10     │ 22          │ 4          │ 5       │
│ 12     │ 27          │ 4          │ 6       │
│ 14     │ 32          │ 3          │ 7       │
│ 16     │ 36          │ 4          │ 8       │
│ 17     │ 40          │ 2          │ 9       │
└────────┴─────────────┴────────────┴─────────┘
Run Time: real 0.000 user 0.000000 sys 0.000049
changes: 8   total_changes: 26
-- SELECT * FROM file_block ORDER BY block_id LIMIT 50;

CREATE TABLE free_block
AS
SELECT
    ROW_NUMBER () OVER
    (   ORDER BY
            s.start_block ASC
        ,   x.VALUE ASC
    )  AS block_seq
,   x.VALUE  AS block_id
FROM
    segment  AS s
JOIN
    generate_series (s.start_block, s.start_block + s.num_blocks - 1, 1)  AS x
WHERE
    s.file_id IS NULL
;
Run Time: real 0.000 user 0.000145 sys 0.000000
changes: 8   total_changes: 26

CREATE UNIQUE INDEX free_block_uk1 ON free_block ( block_seq )
;
Run Time: real 0.000 user 0.000047 sys 0.000000
changes: 8   total_changes: 26
CREATE UNIQUE INDEX free_block_uk2 ON free_block ( block_id )
;
Run Time: real 0.000 user 0.000039 sys 0.000000
changes: 8   total_changes: 26

-- SELECT * FROM segment WHERE file_id IS NULL ORDER BY start_block LIMIT 50;
-- SELECT * FROM free_block ORDER BY block_id LIMIT 50;

CREATE VIEW defrag_block
AS
SELECT
    bi.block_id
,   CASE WHEN fr_s.block_id IS NULL
        THEN fb_i.file_id
        ELSE fb_s.file_id
    END  AS file_id
FROM
(   SELECT
        VALUE  AS block_id
    FROM
        generate_series
        (   0
        ,   (   SELECT
                    SUM (num_blocks) - 1
                FROM
                    segment
                WHERE
                    file_id IS NOT NULL
            )
        )
) AS bi
LEFT JOIN
    file_block  AS fb_i
    ON
        fb_i.block_id = bi.block_id
LEFT JOIN
    free_block  AS fr_s
    ON
        bi.block_id = fr_s.block_id
LEFT JOIN
    file_block  AS fb_s
    ON
        fr_s.block_seq = fb_s.block_seq
;
Run Time: real 0.001 user 0.000103 sys 0.000000
changes: 8   total_changes: 26

SELECT
    SUBSTRING (STRING_AGG (file_id, ''), 1, 80)
FROM
    defrag_block
ORDER BY
    block_id
;
┌─────────────────────────────────────────────┐
│ SUBSTRING (STRING_AGG (file_id, ''), 1, 80) │
├─────────────────────────────────────────────┤
│ '0099811188827773336446555566'              │
└─────────────────────────────────────────────┘
Run Time: real 0.000 user 0.000113 sys 0.000000
changes: 8   total_changes: 26

SELECT
    SUM (block_id * file_id)  AS "Part One: Disk Defragmenter"
FROM
    defrag_block
;
┌─────────────────────────────┐
│ Part One: Disk Defragmenter │
├─────────────────────────────┤
│ 1928                        │
└─────────────────────────────┘
Run Time: real 0.000 user 0.000074 sys 0.000000
changes: 8   total_changes: 26


.stats
Memory Used:                         111888 (max 217200) bytes
Number of Outstanding Allocations:   286 (max 377)
Number of Pcache Overflow Bytes:     43216 (max 43216) bytes
Largest Allocation:                  87360 bytes
Largest Pcache Allocation:           4368 bytes
Lookaside Slots Used:                46 (max 123)
Successful lookaside attempts:       1384
Lookaside failures due to size:      16
Lookaside failures due to OOM:       141
Pager Heap Usage:                    39720 bytes
Page cache hits:                     82
Page cache misses:                   0
Page cache writes:                   0
Page cache spills:                   0
Schema Heap Usage:                   6680 bytes
Statement Heap/Lookaside Usage:      0 bytes
Bytes received by read():            23352
Bytes sent to write():               5681
Read() system calls:                 38
Write() system calls:                31
Bytes read from storage:             0
Bytes written to storage:            0
Cancelled write bytes:               0

CREATE TABLE segment
(   seg_id              INT
,   start_block         INT
,   num_blocks          INT
,   file_id             INT
);
Run Time: real 0.000 user 0.000000 sys 0.000160
changes: 0   total_changes: 0

.import --csv '| awk -f load-segments.awk $LOAD_FILE' segment
UPDATE segment SET file_id = NULL WHERE file_id = -9999;
Run Time: real 0.003 user 0.003238 sys 0.000035
changes: 8996   total_changes: 27992
SELECT COUNT (*) FROM segment;
┌───────────┐
│ COUNT (*) │
├───────────┤
│ 18996     │
└───────────┘
Run Time: real 0.000 user 0.000023 sys 0.000002
changes: 8996   total_changes: 27992

CREATE TABLE file_block
AS
SELECT
    ROW_NUMBER () OVER
    (   ORDER BY
            s.start_block DESC
        ,   x.VALUE ASC
    )  AS block_seq
,   x.VALUE  AS block_id
,   s.file_id
FROM
    segment  AS s
JOIN
    generate_series (s.start_block, s.start_block + s.num_blocks - 1, 1)  AS x
WHERE
    s.file_id IS NOT NULL
;
Run Time: real 0.054 user 0.050958 sys 0.002942
changes: 8996   total_changes: 27992

CREATE UNIQUE INDEX file_block_uk1 ON file_block ( block_seq )
;
Run Time: real 0.013 user 0.011503 sys 0.001031
changes: 8996   total_changes: 27992
CREATE UNIQUE INDEX file_block_uk2 ON file_block ( block_id )
;
Run Time: real 0.013 user 0.011687 sys 0.000976
changes: 8996   total_changes: 27992

SELECT * FROM segment WHERE file_id IS NOT NULL ORDER BY start_block LIMIT 50;
┌────────┬─────────────┬────────────┬─────────┐
│ seg_id │ start_block │ num_blocks │ file_id │
├────────┼─────────────┼────────────┼─────────┤
│ 0      │ 0           │ 9          │ 0       │
│ 2      │ 15          │ 3          │ 1       │
│ 4      │ 24          │ 1          │ 2       │
│ 6      │ 29          │ 8          │ 3       │
│ 8      │ 42          │ 4          │ 4       │
│ 10     │ 48          │ 7          │ 5       │
│ 12     │ 63          │ 7          │ 6       │
│ 14     │ 79          │ 8          │ 7       │
│ 16     │ 96          │ 5          │ 8       │
│ 18     │ 110         │ 2          │ 9       │
│ 20     │ 118         │ 6          │ 10      │
│ 22     │ 133         │ 8          │ 11      │
│ 24     │ 148         │ 2          │ 12      │
│ 26     │ 154         │ 4          │ 13      │
│ 28     │ 166         │ 2          │ 14      │
│ 30     │ 174         │ 7          │ 15      │
│ 31     │ 181         │ 8          │ 16      │
│ 33     │ 195         │ 7          │ 17      │
│ 35     │ 203         │ 9          │ 18      │
│ 37     │ 219         │ 8          │ 19      │
│ 39     │ 234         │ 9          │ 20      │
│ 41     │ 247         │ 1          │ 21      │
│ 43     │ 252         │ 9          │ 22      │
│ 45     │ 263         │ 9          │ 23      │
│ 47     │ 275         │ 3          │ 24      │
│ 49     │ 281         │ 9          │ 25      │
│ 51     │ 293         │ 9          │ 26      │
│ 53     │ 308         │ 3          │ 27      │
│ 55     │ 314         │ 2          │ 28      │
│ 57     │ 324         │ 8          │ 29      │
│ 59     │ 335         │ 4          │ 30      │
│ 60     │ 339         │ 9          │ 31      │
│ 62     │ 350         │ 1          │ 32      │
│ 64     │ 360         │ 5          │ 33      │
│ 66     │ 371         │ 4          │ 34      │
│ 68     │ 376         │ 3          │ 35      │
│ 70     │ 386         │ 8          │ 36      │
│ 72     │ 401         │ 4          │ 37      │
│ 74     │ 411         │ 4          │ 38      │
│ 76     │ 424         │ 7          │ 39      │
│ 78     │ 440         │ 7          │ 40      │
│ 80     │ 453         │ 9          │ 41      │
│ 82     │ 463         │ 5          │ 42      │
│ 84     │ 476         │ 3          │ 43      │
│ 86     │ 481         │ 3          │ 44      │
│ 88     │ 487         │ 4          │ 45      │
│ 90     │ 494         │ 4          │ 46      │
│ 92     │ 503         │ 9          │ 47      │
│ 94     │ 513         │ 9          │ 48      │
│ 96     │ 524         │ 1          │ 49      │
└────────┴─────────────┴────────────┴─────────┘
Run Time: real 0.001 user 0.001200 sys 0.000015
changes: 8996   total_changes: 27992
-- SELECT * FROM file_block ORDER BY block_id LIMIT 50;

CREATE TABLE free_block
AS
SELECT
    ROW_NUMBER () OVER
    (   ORDER BY
            s.start_block ASC
        ,   x.VALUE ASC
    )  AS block_seq
,   x.VALUE  AS block_id
FROM
    segment  AS s
JOIN
    generate_series (s.start_block, s.start_block + s.num_blocks - 1, 1)  AS x
WHERE
    s.file_id IS NULL
;
Run Time: real 0.043 user 0.042105 sys 0.001021
changes: 8996   total_changes: 27992

CREATE UNIQUE INDEX free_block_uk1 ON free_block ( block_seq )
;
Run Time: real 0.011 user 0.010544 sys 0.000000
changes: 8996   total_changes: 27992
CREATE UNIQUE INDEX free_block_uk2 ON free_block ( block_id )
;
Run Time: real 0.010 user 0.010340 sys 0.000001
changes: 8996   total_changes: 27992

-- SELECT * FROM segment WHERE file_id IS NULL ORDER BY start_block LIMIT 50;
-- SELECT * FROM free_block ORDER BY block_id LIMIT 50;

CREATE VIEW defrag_block
AS
SELECT
    bi.block_id
,   CASE WHEN fr_s.block_id IS NULL
        THEN fb_i.file_id
        ELSE fb_s.file_id
    END  AS file_id
FROM
(   SELECT
        VALUE  AS block_id
    FROM
        generate_series
        (   0
        ,   (   SELECT
                    SUM (num_blocks) - 1
                FROM
                    segment
                WHERE
                    file_id IS NOT NULL
            )
        )
) AS bi
LEFT JOIN
    file_block  AS fb_i
    ON
        fb_i.block_id = bi.block_id
LEFT JOIN
    free_block  AS fr_s
    ON
        bi.block_id = fr_s.block_id
LEFT JOIN
    file_block  AS fb_s
    ON
        fr_s.block_seq = fb_s.block_seq
;
Run Time: real 0.000 user 0.000112 sys 0.000000
changes: 8996   total_changes: 27992

SELECT
    SUBSTRING (STRING_AGG (file_id, ''), 1, 80)
FROM
    defrag_block
ORDER BY
    block_id
;
┌──────────────────────────────────────────────────────────────┐
│         SUBSTRING (STRING_AGG (file_id, ''), 1, 80)          │
├──────────────────────────────────────────────────────────────┤
│ '00000000099999999999999999999999911199999998999899989997999 │
│ 729997999799979996333'                                       │
└──────────────────────────────────────────────────────────────┘
Run Time: real 0.039 user 0.038595 sys 0.000000
changes: 8996   total_changes: 27992

SELECT
    SUM (block_id * file_id)  AS "Part One: Disk Defragmenter"
FROM
    defrag_block
;
┌─────────────────────────────┐
│ Part One: Disk Defragmenter │
├─────────────────────────────┤
│ 6360094256423               │
└─────────────────────────────┘
Run Time: real 0.037 user 0.036499 sys 0.000000
changes: 8996   total_changes: 27992


.stats
Memory Used:                         4222720 (max 6290096) bytes
Number of Outstanding Allocations:   1224 (max 1315)
Number of Pcache Overflow Bytes:     4147904 (max 4152008) bytes
Largest Allocation:                  2048000 bytes
Largest Pcache Allocation:           4368 bytes
Lookaside Slots Used:                46 (max 123)
Successful lookaside attempts:       115251
Lookaside failures due to size:      17
Lookaside failures due to OOM:       141
Pager Heap Usage:                    4121896 bytes
Page cache hits:                     319289
Page cache misses:                   0
Page cache writes:                   0
Page cache spills:                   0
Schema Heap Usage:                   6680 bytes
Statement Heap/Lookaside Usage:      0 bytes
Bytes received by read():            398910
Bytes sent to write():               363622
Read() system calls:                 128
Write() system calls:                117
Bytes read from storage:             0
Bytes written to storage:            0
Cancelled write bytes:               0
#+end_example

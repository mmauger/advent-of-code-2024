#+TITLE: Advent of Code 2024
#+SUBTITLE: Day 10: Hoof It
#+AUTHOR: Michael R. Mauger
#+DATE: [Tue Dec 10 19:20:27 EST 2024]
#+STARTUP: showeverything inlineimages
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}
#+OPTIONS: num:nil

#+AUTO_TANGLE: t
#+PROPERTY: header-args    :tangle no
#+PROPERTY: header-args    :noweb no-export

* Day 10: Hoof It

You all arrive at a Lava Production Facility on a floating island in
the sky. As the others begin to search the massive industrial complex,
you feel a small nose boop your leg and look down to discover a
reindeer wearing a hard hat.

The reindeer is holding a book titled "Lava Island Hiking
Guide". However, when you open the book, you discover that most of it
seems to have been scorched by lava! As you're about to ask how you
can help, the reindeer brings you a blank topographic map of the
surrounding area (your puzzle input) and looks up at you excitedly.

Perhaps you can help fill in the missing hiking trails?

The topographic map indicates the height at each position using a
scale from 0 (lowest) to 9 (highest). For example:

#+begin_example
0123
1234
8765
9876
#+end_example

Based on un-scorched scraps of the book, you determine that a good
hiking trail is as long as possible and has an even, gradual, uphill
slope. For all practical purposes, this means that a hiking trail is
any path that starts at height 0, ends at height 9, and always
increases by a height of exactly 1 at each step. Hiking trails never
include diagonal steps - only up, down, left, or right (from the
perspective of the map).

You look up from the map and notice that the reindeer has helpfully
begun to construct a small pile of pencils, markers, rulers,
compasses, stickers, and other equipment you might need to update the
map with hiking trails.

A trailhead is any position that starts one or more hiking trails -
here, these positions will always have height 0. Assembling more
fragments of pages, you establish that a trailhead's score is the
number of 9-height positions reachable from that trailhead via a
hiking trail. In the above example, the single trailhead in the top
left corner has a score of 1 because it can reach a single 9 (the one
in the bottom left).

This trailhead has a score of 2:

#+begin_example
...0...
...1...
...2...
6543456
7.....7
8.....8
9.....9
#+end_example

(The positions marked . are impassable tiles to simplify these
examples; they do not appear on your actual topographic map.)

This trailhead has a score of 4 because every 9 is reachable via a
hiking trail except the one immediately to the left of the trailhead:

#+begin_example
..90..9
...1.98
...2..7
6543456
765.987
876....
987....
#+end_example

This topographic map contains two trailheads; the trailhead at the top
has a score of 1, while the trailhead at the bottom has a score of 2:

#+begin_example
10..9..
2...8..
3...7..
4567654
...8..3
...9..2
.....01
#+end_example

Here's a larger example:

#+BEGIN_SRC text :tangle example.dat
89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732
#+END_SRC

This larger example has 9 trailheads. Considering the trailheads in
reading order, they have scores of 5, 6, 5, 3, 1, 3, 5, 3,
and 5. Adding these scores together, the sum of the scores of all
trailheads is 36.

The reindeer gleefully carries over a protractor and adds it to the
pile. What is the sum of the scores of all trailheads on your
topographic map?

** Part Two

The reindeer spends a few minutes reviewing your hiking trail map
before realizing something, disappearing for a few minutes, and
finally returning with yet another slightly-charred piece of paper.

The paper describes a second way to measure a trailhead called its
rating. A trailhead's rating is the number of distinct hiking trails
which begin at that trailhead. For example:

#+begin_example
.....0.
..4321.
..5..2.
..6543.
..7..4.
..8765.
..9....
#+end_example

The above map has a single trailhead; its rating is 3 because there
are exactly three distinct hiking trails which begin at that position:

#+begin_example
.....0.   .....0.   .....0.
..4321.   .....1.   .....1.
..5....   .....2.   .....2.
..6....   ..6543.   .....3.
..7....   ..7....   .....4.
..8....   ..8....   ..8765.
..9....   ..9....   ..9....
#+end_example

Here is a map containing a single trailhead with rating 13:

#+begin_example
..90..9
...1.98
...2..7
6543456
765.987
876....
987....
#+end_example

This map contains a single trailhead with rating 227 (because there
are 121 distinct hiking trails that lead to the 9 on the right edge
and 106 that lead to the 9 on the bottom edge):

#+begin_example
012345
123456
234567
345678
4.6789
56789.
#+end_example

Here's the larger example from before:

#+begin_example
89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732
#+end_example

Considering its trailheads in reading order, they have ratings of 20,
24, 10, 4, 1, 4, 5, 8, and 5. The sum of all trailhead ratings in this
larger example topographic map is 81.

You're not sure how, but the reindeer seems to have crafted some tiny
flags out of toothpicks and bits of paper and is using them to mark
trailheads on your topographic map. What is the sum of the ratings of
all trailheads?


* Solution
Let's do this one in sqlite...

** Part One
1. Load the data into a sinple grid with ~row~ and ~grid~.
2. Transform the grid into a table that has ~row~, ~col~, and ~height~
3. We can then write a recursive query to navigate from a ~0~ to a ~9~ via joins
   to adjacent cells and an increase in height.
4. The final answer will be the sum of the counts of summits from each source.

** Part Two
1. Essentially the same process but count the distinct paths rather
   than just the summits.


* Implementation

#+BEGIN_SRC sql :tangle hoof-it.sql
  -- Advent of Code 2024 -- Code challenge for December 10, 2024
  -- Copyright (C) 2024  Michael R. Mauger

  -- This program is free software: you can redistribute it and/or modify
  -- it under the terms of the GNU General Public License as published by
  -- the Free Software Foundation, either version 3 of the License, or
  -- (at your option) any later version.

  -- This program is distributed in the hope that it will be useful,
  -- but WITHOUT ANY WARRANTY; without even the implied warranty of
  -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  -- GNU General Public License for more details.

  -- You should have received a copy of the GNU General Public License
  -- along with this program.  If not, see <https://www.gnu.org/licenses/>.

  .mode qbox
  .changes on
  .timer on

  CREATE TABLE map_grid
  (   row_n       INT
  ,   grid        TEXT
  );

  CREATE TABLE map_point
  (   row_n       INT
  ,   col_n       INT
  ,   height      INT
  );

  <<load-grid>>
  <<transform-point>>
  <<find-paths>>
  <<find-paths2>>

  .stats

#+END_SRC

** Part One
*** Load the grid
#+NAME: load-grid
#+BEGIN_SRC sql
  .import --csv '| awk -f load.awk $LOAD_FILE' map_grid
  -- SELECT * FROM map_grid ORDER BY row_n;

#+END_SRC

#+BEGIN_SRC awk :tangle load.awk
  BEGIN {
      OFS = ","
  }

  {
      print (NR - 1), $0
  }
#+END_SRC

*** Transform grid into map points
#+NAME: transform-point
#+BEGIN_SRC sql
  INSERT
  INTO
      map_point
      (   row_n
      ,   col_n
      ,   height
      )
  SELECT
      g.row_n
  ,   x.VALUE - 1 AS col_n
  ,   SUBSTRING (g.grid, x.VALUE, 1)  AS height
  FROM
      map_grid  AS g
  CROSS JOIN
      GENERATE_SERIES (1, LENGTH (g.grid))  AS x
  ;

#+END_SRC

*** Find paths from zeroes to nines
#+NAME: find-paths
#+BEGIN_SRC sql
  WITH
      RECURSIVE path
  (   from_row_n
  ,   from_col_n
  ,   from_height
  ,   to_row_n
  ,   to_col_n
  ,   to_height
  ,   map_path
  )
  AS
  (   SELECT
          row_n  AS from_row_n
      ,   col_n  AS from_col_n
      ,   height  AS from_height
      ,   row_n  AS to_row_n
      ,   col_n  AS to_col_n
      ,   height  AS to_height
      ,   FORMAT ('[%d,%d]/%d', row_n, col_n, height)  AS map_path
      FROM
          map_point
      WHERE
          height = 0
  UNION ALL
      SELECT
          p_from.from_row_n  AS from_row_n
      ,   p_from.from_col_n  AS from_col_n
      ,   p_from.from_height  AS from_height
      ,   p_to.row_n  AS to_row_n
      ,   p_to.col_n  AS to_col_n
      ,   p_to.height  AS to_height
      ,   p_from.map_path ||'; '
          || FORMAT ('[%d,%d]/%d', p_to.row_n, p_to.col_n, p_to.height)  AS map_path
      FROM
          map_point AS p_to
      JOIN
          path AS p_from
          ON
          (   p_from.to_row_n = p_to.row_n
          AND
              p_from.to_col_n IN (p_to.col_n - 1, p_to.col_n + 1)
          )
          OR
          (   p_from.to_row_n IN (p_to.row_n - 1, p_to.row_n + 1)
          AND
              p_from.to_col_n = p_to.col_n
          )
      WHERE -- strictly climbing
          p_to.height = p_from.to_height + 1
  )
  SELECT
      SUM (to_count)  AS "Part One: Hoof It summit counts"
  FROM
  (   SELECT
          from_row_n
      ,   from_col_n
      ,   COUNT (DISTINCT FORMAT ('%d,%d', to_row_n, to_col_n))  AS to_count
      FROM
          path
      WHERE
          to_height = 9
      GROUP BY
          from_row_n
      ,   from_col_n
  )
  ;
#+END_SRC

** Part Two
*** Find paths from zeroes to nines
#+NAME: find-paths2
#+BEGIN_SRC sql
  WITH
      RECURSIVE path
  (   from_row_n
  ,   from_col_n
  ,   from_height
  ,   to_row_n
  ,   to_col_n
  ,   to_height
  ,   map_path
  )
  AS
  (   SELECT
          row_n  AS from_row_n
      ,   col_n  AS from_col_n
      ,   height  AS from_height
      ,   row_n  AS to_row_n
      ,   col_n  AS to_col_n
      ,   height  AS to_height
      ,   FORMAT ('[%d,%d]/%d', row_n, col_n, height)  AS map_path
      FROM
          map_point
      WHERE
          height = 0
  UNION ALL
      SELECT
          p_from.from_row_n  AS from_row_n
      ,   p_from.from_col_n  AS from_col_n
      ,   p_from.from_height  AS from_height
      ,   p_to.row_n  AS to_row_n
      ,   p_to.col_n  AS to_col_n
      ,   p_to.height  AS to_height
      ,   p_from.map_path ||'; '
          || FORMAT ('[%d,%d]/%d', p_to.row_n, p_to.col_n, p_to.height)  AS map_path
      FROM
          map_point AS p_to
      JOIN
          path AS p_from
          ON
          (   p_from.to_row_n = p_to.row_n
          AND
              p_from.to_col_n IN (p_to.col_n - 1, p_to.col_n + 1)
          )
          OR
          (   p_from.to_row_n IN (p_to.row_n - 1, p_to.row_n + 1)
          AND
              p_from.to_col_n = p_to.col_n
          )
      WHERE -- strictly climbing
          p_to.height = p_from.to_height + 1
  )
  SELECT
      SUM (to_count)  AS "Part Two: Hoof It trail rating"
  FROM
  (   SELECT
          from_row_n
      ,   from_col_n
      ,   COUNT (DISTINCT map_path)  AS to_count
      FROM
          path
      WHERE
          to_height = 9
      GROUP BY
          from_row_n
      ,   from_col_n
  )
  ;

#+END_SRC


* Data

#+BEGIN_SRC text :tangle input.dat
  5678970120787667809876787651450321789810165432234561012345
  4301787431296556912765698540341410786728765501103676545434
  3212896594365443213454501231232545695439154610898387656946
  4307885785872337801653215432545694321089043781763296047877
  5456934576901236998740126721694787899676112891054102137898
  4327825676210365485035432830780146788765208982567873223703
  1012010789301345304126701910567235623654367643432984012612
  9887652105401253213239878323458945514545106543221265698543
  6798943766798760560145569850179876408763215456100896787432
  5212237854899621056776457763287654309854580367018701656501
  4302108983014552345889308954390101218345691278929632540987
  8921321212123467496973217654321010101210782987834541231236
  7010450908765658787210106563898110567623458906543210340145
  6524567849434349872323293478967223408988967217890107459054
  5433008956721238721494782566554310510177654394345498768765
  8942112349810101430585691057431214321287656783216321659056
  9853523658901233549674541008120109450392345654307010123141
  6765434567890312678234432219078218765431874309458927034230
  1034323450765403510165498348569341016210967218567898985541
  4125614321877654523276327653414452547893458967898769876632
  3210701234988347678987014512103963458982105450745601896781
  4678890215679298689898101105432878967821123301234312765890
  5469810309100198776543239416001263456710054210126543454323
  6954323458210789743987678327122452349821269329237632670110
  7856542167345679812310565498214301265430178778748911789224
  3067630018901256701423457012303210178923476565652100654343
  2188921078872345690501298989452121089012383418983434334534
  3298934569863418987632367898763011298234592307894521025676
  0387650101678507876753456501014980347105681016765601210787
  1456343212589216909865401432325671256501789823454782309898
  2341067823410365419872316543234560787432328987123495434321
  8932058934321474321891027652101765698543212656016596521030
  7634149965430589890765438984989854321692303443067787676543
  4543232876787672763210567823870143430781054512198971980612
  4687601045298101454569498014561034231278766503456890121701
  3894523432101212343278307601432120140389107652107765439890
  2183410589043239852101212587347899655473298940998987610141
  1012398679650126760120103496256978796554567831876898543234
  0310487778743245679833210145107878987143278722365687650125
  1223456899012632988744103230123217610012189013451232105676
  8346543456598701279655654389874306526323076567600345694789
  9857812347405654210346969210165435435414105458912256783238
  6768901098312343981237878301456521056905912345863109890104
  0345650101232107834369765412347678167876801056874223454323
  1278761321943456125078098943678999101210760767985214567910
  2109874430854534076165107834567783212323458898876307698876
  3436543561763325689234256623478654323212789954343298714565
  4567612675610118763240345510569823434101652765210134503443
  5698203984323709454121245432234712345612501897898325612652
  6782100112345890365039876101165601016780432101107210726761
  6783078201076761276321276543036523239891569232216874835890
  5894569345987457889430389236543210145652678740125965934701
  6784578896590356996321298107012301276743245656734014821012
  5693678787101243987654301058905434985890130543876523498763
  4542109843262012276019012765676125673981021982923434549854
  3432101257876540145328943894387089012832123671019323676345
  4309210369901234239457654703298976326721034501208710789234
  3218765478710123378765645612107845435434345212345621678101
#+END_SRC


* Execution

#+BEGIN_SRC bash :results output
  LOAD_FILE=example.dat sqlite3 :memory: < hoof-it.sql
  LOAD_FILE=input.dat   sqlite3 :memory: < hoof-it.sql
#+END_SRC

#+RESULTS:
#+begin_example
Run Time: real 0.000 user 0.000159 sys 0.000000
changes: 0   total_changes: 0
Run Time: real 0.000 user 0.000063 sys 0.000000
changes: 0   total_changes: 0
Run Time: real 0.000 user 0.000077 sys 0.000000
changes: 64   total_changes: 72
┌─────────────────────────────────┐
│ Part One: Hoof It summit counts │
├─────────────────────────────────┤
│ 36                              │
└─────────────────────────────────┘
Run Time: real 0.001 user 0.001023 sys 0.000000
changes: 64   total_changes: 72
┌────────────────────────────────┐
│ Part Two: Hoof It trail rating │
├────────────────────────────────┤
│ 81                             │
└────────────────────────────────┘
Run Time: real 0.000 user 0.000892 sys 0.000000
changes: 64   total_changes: 72
Memory Used:                         84368 (max 424064) bytes
Number of Outstanding Allocations:   212 (max 488)
Number of Pcache Overflow Bytes:     21336 (max 50064) bytes
Largest Allocation:                  87360 bytes
Largest Pcache Allocation:           4368 bytes
Lookaside Slots Used:                51 (max 123)
Successful lookaside attempts:       3109
Lookaside failures due to size:      9
Lookaside failures due to OOM:       707
Pager Heap Usage:                    17960 bytes
Page cache hits:                     27
Page cache misses:                   0
Page cache writes:                   0
Page cache spills:                   0
Schema Heap Usage:                   1344 bytes
Statement Heap/Lookaside Usage:      0 bytes
Bytes received by read():            23820
Bytes sent to write():               1269
Read() system calls:                 40
Write() system calls:                6
Bytes read from storage:             0
Bytes written to storage:            0
Cancelled write bytes:               0
Run Time: real 0.001 user 0.000069 sys 0.000069
changes: 0   total_changes: 0
Run Time: real 0.000 user 0.000038 sys 0.000038
changes: 0   total_changes: 0
Run Time: real 0.001 user 0.000984 sys 0.000000
changes: 3364   total_changes: 3422
┌─────────────────────────────────┐
│ Part One: Hoof It summit counts │
├─────────────────────────────────┤
│ 760                             │
└─────────────────────────────────┘
Run Time: real 0.243 user 0.240559 sys 0.000967
changes: 3364   total_changes: 3422
┌────────────────────────────────┐
│ Part Two: Hoof It trail rating │
├────────────────────────────────┤
│ 1764                           │
└────────────────────────────────┘
Run Time: real 0.243 user 0.242055 sys 0.000001
changes: 3364   total_changes: 3422
Memory Used:                         128128 (max 910088) bytes
Number of Outstanding Allocations:   222 (max 498)
Number of Pcache Overflow Bytes:     65096 (max 277616) bytes
Largest Allocation:                  262144 bytes
Largest Pcache Allocation:           4368 bytes
Lookaside Slots Used:                51 (max 123)
Successful lookaside attempts:       82787
Lookaside failures due to size:      9
Lookaside failures due to OOM:       707
Pager Heap Usage:                    61480 bytes
Page cache hits:                     126
Page cache misses:                   0
Page cache writes:                   0
Page cache spills:                   0
Schema Heap Usage:                   1344 bytes
Statement Heap/Lookaside Usage:      0 bytes
Bytes received by read():            30668
Bytes sent to write():               4779
Read() system calls:                 40
Write() system calls:                6
Bytes read from storage:             0
Bytes written to storage:            0
Cancelled write bytes:               0
#+end_example
